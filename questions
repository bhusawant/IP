### Error handling in React:

In React, error boundaries are used to handle errors within the component tree. They catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI. Here's an example:

**Code Example:**

```javascript
import React, { Component } from 'react';

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // Log the error to an error reporting service
    console.error(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }
    return this.props.children;
  }
}

// Usage:
<ErrorBoundary>
  {/* Your Components */}
</ErrorBoundary>
```

### Error handling in Express:

In Express, error handling is done through middleware functions. You can define an error-handling middleware function with four arguments (err, req, res, next). This function is used to handle errors in the application.

**Code Example:**

```javascript
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});
```

### Error handling in Node.js:

In Node.js, errors can be handled using try-catch blocks. For asynchronous operations, error handling is performed using callbacks or Promise rejections.

**Code Example:**

```javascript
try {
  // Some code that might throw an error
  throw new Error('This is an error');
} catch (error) {
  console.error('Caught an error:', error);
}
```

### Display dialog box in JavaScript:

You can display a dialog box using the `window.alert`, `window.prompt`, or `window.confirm` methods in JavaScript.

**Code Example:**

```javascript
// Alert dialog
window.alert('This is an alert!');

// Prompt dialog
let result = window.prompt('Enter your name:', 'John Doe');
console.log('User input:', result);

// Confirm dialog
let userConfirmed = window.confirm('Are you sure?');
console.log('User confirmation:', userConfirmed);
```

I'll provide the examples for the remaining topics in a follow-up message to avoid overwhelming the response.

Continuing from where we left off:

### Create references (React):

In React, you can create references using `React.createRef()` or using callback refs to access the DOM nodes of a React component.

**Code Example:**

```javascript
import React, { Component } from 'react';

class MyComponent extends Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef();
  }

  componentDidMount() {
    this.myRef.current.focus();
  }

  render() {
    return <input type="text" ref={this.myRef} />;
  }
}
```

### File handling in Node.js:

Node.js offers the 'fs' module to handle file operations like reading, writing, and deleting files.

**Code Example:**

```javascript
const fs = require('fs');

// Reading a file
fs.readFile('example.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log(data);
});

// Writing to a file
fs.writeFile('newFile.txt', 'Content to write', (err) => {
  if (err) throw err;
  console.log('File written successfully');
});
```

### Buffers in Node.js:

Buffers are used to handle binary data in Node.js. They are instances of the `Buffer` class.

**Code Example:**

```javascript
// Creating a buffer
const buf = Buffer.from('Hello', 'utf8');
console.log(buf); // <Buffer 48 65 6c 6c 6f>

// Converting buffer to string
const str = buf.toString('utf8');
console.log(str); // Hello
```

### Using streams in Node.js:

Streams are objects that let you read data from a source or write data to a destination in a continuous manner.

**Code Example:**

```javascript
const fs = require('fs');

// Reading file using streams
const readStream = fs.createReadStream('input.txt', 'utf8');
readStream.on('data', (chunk) => {
  console.log(chunk);
});

// Writing to file using streams
const writeStream = fs.createWriteStream('output.txt');
writeStream.write('Writing to a file using streams');
```

For the next set of topics, I'll continue in the following response to avoid exceeding the message limit.

Continuing with the remaining topics:

### Use Bootstrap to style HTML table:

Bootstrap provides classes to style HTML tables, making them more visually appealing and responsive.

**Code Example:**

```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
  <table class="table table-striped">
    <thead>
      <tr>
        <th>#</th>
        <th>First Name</th>
        <th>Last Name</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td>John</td>
        <td>Doe</td>
      </tr>
      <!-- More rows -->
    </tbody>
  </table>
</body>
</html>
```

### Use Bootstrap to display a resume:

Bootstrap can be used to structure and style a resume, organizing its sections with a grid system and various Bootstrap components.

**Code Example:**

```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
  <div class="container">
    <div class="row">
      <div class="col-md-6">
        <!-- Resume details -->
      </div>
    </div>
  </div>
</body>
</html>
```

### Pass parameters using Props in React:

In React, you can pass parameters to components using props.

**Code Example:**

```javascript
import React from 'react';

const Greeting = (props) => {
  return <h1>Hello, {props.name}!</h1>;
};

// Usage
<Greeting name="Alice" />
```

### Bootstrap Jumbotron:

A Jumbotron in Bootstrap is a large showcase area or call-to-action section.

**Code Example:**

```html
<div class="jumbotron">
  <h1>Welcome to our site!</h1>
  <p>This is a fantastic website using Bootstrap's Jumbotron.</p>
</div>
```

### Use CSS to style an HTML table:

You can use CSS to style HTML tables by targeting the table, rows, cells, and adding styles as needed.

**Code Example:**

```html
<style>
  table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    border: 1px solid black;
    padding: 8px;
    text-align: center;
  }
</style>
```

The next set of topics will be continued in the following response to maintain clarity and prevent information overload.

Continuing with the topics:

### Write a program (WAP) using UseState in React:

The `useState` hook in React allows functional components to have state.

**Code Example:**

```javascript
import React, { useState } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};
```

### Promise with UseStates in JavaScript:

You can use Promises with `useState` to manage asynchronous data fetching.

**Code Example:**

```javascript
import React, { useState, useEffect } from 'react';

const DataComponent = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetchData()
      .then(result => setData(result))
      .catch(error => console.error(error));
  }, []);

  const fetchData = () => {
    return new Promise((resolve, reject) => {
      // Simulated API call
      setTimeout(() => resolve('Data fetched'), 2000);
    });
  };

  return <div>{data ? data : 'Loading...'}</div>;
};
```

### Demonstrate Navbar using Bootstrap:

Bootstrap provides a pre-styled Navbar component for building navigation bars.

**Code Example:**

```html
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">Navbar</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  <div class="collapse navbar-collapse" id="navbarNav">
    <ul class="navbar-nav">
      <li class="nav-item active">
        <a class="nav-link" href="#">Home</a>
      </li>
      <!-- More navigation items -->
    </ul>
  </div>
</nav>
```

### DOM Manipulation using JavaScript:

JavaScript enables manipulation of the Document Object Model (DOM) to change elements and their attributes.

**Code Example:**

```javascript
// Changing element content
document.getElementById('myElement').innerHTML = 'New Content';

// Changing element style
document.getElementById('myElement').style.color = 'red';

// Creating new elements
const newDiv = document.createElement('div');
newDiv.textContent = 'New Div';
document.body.appendChild(newDiv);
```

The final set of topics will be continued in the following response.

Continuing with the last set of topics:

### Print 1 to 10 using arrow functions in JavaScript:

You can print numbers from 1 to 10 using arrow functions and a loop.

**Code Example:**

```javascript
const printNumbers = () => {
  for (let i = 1; i <= 10; i++) {
    console.log(i);
  }
};

printNumbers();
```

### Bootstrap badges:

Bootstrap provides badge components to create visually striking notifications.

**Code Example:**

```html
<span class="badge badge-primary">New</span>
<span class="badge badge-secondary">Pending</span>
<span class="badge badge-success">Approved</span>
<!-- Add more badges -->
```

### React form with validations:

In React, you can create a form with validations using state to manage form input and validate it.

**Code Example:**

```javascript
import React, { useState } from 'react';

const Form = () => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');

  const handleValidation = () => {
    if (!email.includes('@')) {
      setError('Invalid email');
      return;
    }
    // Handle form submission
  };

  return (
    <div>
      <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
      <button onClick={handleValidation}>Submit</button>
      {error && <p>{error}</p>}
    </div>
  );
};
```

### Create a login form using Express:

Express can handle forms by capturing form data from the request object.

**Code Example:**

```javascript
const express = require('express');
const app = express();

app.use(express.urlencoded({ extended: true }));

app.get('/login', (req, res) => {
  res.sendFile(__dirname + '/login.html');
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  // Validate and handle login
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
```

### User - Client using Node.js net package:

Node.js 'net' module allows you to create TCP clients.

**Code Example:**

```javascript
const net = require('net');

const client = new net.Socket();
client.connect(3000, '127.0.0.1', () => {
  console.log('Connected to server');
  client.write('Hello, server!');
});

client.on('data', (data) => {
  console.log('Received: ' + data);
  client.destroy(); // close connection
});
```

For the final topics, I'll explain in the next response.

Continuing with the remaining topics:

### Demonstrate Custom Hooks in React:

Custom hooks in React allow you to extract and reuse stateful logic from a component.

**Code Example:**

```javascript
import { useState, useEffect } from 'react';

const UseTimer = (initialTime = 0) => {
  const [time, setTime] = useState(initialTime);

  useEffect(() => {
    const interval = setInterval(() => {
      setTime((prevTime) => prevTime + 1);
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return time;
};

// Usage
const TimerComponent = () => {
  const time = UseTimer(0);

  return <div>Time: {time}</div>;
};
```

### Inheritance in JavaScript:

JavaScript supports prototypal inheritance. Objects can inherit properties and methods from other objects.

**Code Example:**

```javascript
// Parent class
function Animal(name) {
  this.name = name;
}

Animal.prototype.makeSound = function () {
  return 'Some generic sound';
};

// Child class inheriting from Animal
function Dog(name, breed) {
  Animal.call(this, name);
  this.breed = breed;
}

Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;

// Usage
const myDog = new Dog('Buddy', 'Golden Retriever');
console.log(myDog.makeSound()); // Output: Some generic sound
```

### Event handling in Node.js:

Node.js utilizes event-driven architecture. You can create and handle events using the `EventEmitter` class.

**Code Example:**

```javascript
const EventEmitter = require('events');

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();

myEmitter.on('event', () => {
  console.log('Event occurred');
});

myEmitter.emit('event');
```

### Stream module in Node.js:

Node.js Stream module provides an interface for reading and writing data to/from streams.

**Code Example:**

```javascript
const fs = require('fs');

const readStream = fs.createReadStream('input.txt');
const writeStream = fs.createWriteStream('output.txt');

readStream.pipe(writeStream);
```
